<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAOEAAADhCAMAAAAJbSJIAAAABGdBTUEAALGPC/xhBQAAAJlQTFRF2QgS
        ////1wAA/vf1+eLh+Nza65mY2QAO5nx76ZCR5XVz2QAK2QAH1QAA6Y+O2QAA8La399jZ76+t5G5r9tLQ
        ++zs/fT07J+d9MvI9MfI3kJF5HJ02yUq9czN++jp5Xd54l9f8sC+6IiH4FRX3TU57qip305R54KA2hsc
        3C0s4mVn3C803Tw/5Gxv65qb301R2h4j7qut4VteG8xY8AAACw1JREFUeF7tnet6oyoYRsOXg221JW0O
        bTKdNIee29mTmfu/uA2CAlESREAzj+tPW6PGVUF5EbWH/nU6w/OnM3TPgv8MRWjDn1/wfMt/D0NYw9kn
        JL0EPmf87xAENbwE3KNguORTAhDQcJxA6keBaMyneieY4e03RFyPEsFyyD/xTCDD+S9SAVUAfsz5p14J
        Y/gfr4AqGO755z4JYbh5FxVQIYJ3/2dH/4aDJcTcqEgMvwd8Pl/4Nuw/lRZQAYYLPqsnPBu+nPCjYHjh
        c3vBq+Fir5whdETw+JMv4QGPhqvdkQqoEsNfbw05f4ZbgwIqwLDly7nGl+EfXMWPgrGfhpwfw+mXUQVU
        ifzkKh+GaUayIYFf7qujB8MsI9mAYcTX4gznhuNY00QzBHqOq6Njw9ulRQVUiR3nKqeGJCPV24EM7DRX
        uTQsz0g2uMxV7gxJRqpbQAUR7F3lKleGg9/GTTQzYnhd8XXXw41h/8JZARVgeOOrr4UTQ5OMZIOTXOXA
        8Oejwwqo4iJX1TZc/XVcAVXq56q6htUykg11c1U9w7vKGckGqJWr6hhOn71VQJUIvu1zlb2hdUaygeQq
        24actWGdjGSDda6yNBxHLprY1YDehn97JawMHWQkG+xylYXh/IeTjGQDhqfK1bG6obuMZEP1XFXVcOEy
        I9lQOVdVM3SekWyomKsqGfrISDZUylUVDH1lJBsw/OFbdRJjQ48ZyQbzXGVoOPObkWwwzVVmhv4zkg1m
        A49MDMNkJBtMctVpw2AZyQaDXHXKMGhGsuFkrjphGDoj2YDhP761pRw1bCIj2XA0Vx0xHDaTkWw4lqu0
        hiQjtb+ACkiu6vMtP0Bn2GxGskGXq8oNG89INmhyVZnh6rV1TTQzYtgVc1WZ4fW5FVABvuYOgjLD8zhF
        lAPcQdAZnhudIaMzbDOdIaMzbDOdIaMzbDOdIaMzbDOdIaMzbDOdIaMzbDOdIaMzbDOdIaMzbDOdIaMz
        bDOdIaMzbDOdIaMzbDOdIaMzbDOdIaOKIcbQqjHSrg0x7C5fRrsWjfJzbAhrdj/AfNKagu3WULqr874t
        ik4N8YTPT7moUlAjf1XXqSEog3LNB6TGgO+vfCm6NMSffHaG6TYD7O8q7vIqODVUBx3fGS2FYZmO4z0L
        QyC7QmJjshRM+JD689iH6n0cLwZLwZTPfCaGOz4749NgmyG/KeIsDHsg3/43NyqkZ2aIX/n8lLXJJp+b
        YQ+u+AIIvRktc3aGPfhmh47bZckiMYkdBIxFU8CJYZKulqy39J4Qt4bJK8D75O1qD/BFNHAG/QzDx8X9
        3Xh8N1qTLUpnlw2vyBYeQdc+isi6Xt/ux2S9lxPytcX/k+NSisbP1+Tfef1xR5bB6wmDHFUT2Eo3ryyy
        m+CE4WZ0hLcdCZ0leygCeMvPN4TZ3WvB0bUhOYY+bB7IMbUPPcicZoA/Dm7O2eD0RlRheIrhqFe4Mwnj
        4rPNVm8Hju4NOdQwe/T46lo+yDJmPapobkjY7JXtiDQPxDrIpkEMB+/8F5k5LaiVDGnoFLsRY+2yU3l7
        w+zD0gcBPJC1VjREgyQrgvhLc/8k4UYup0EMNbziyoao/8G2Hj/zCSUou7BRQ7IllQ1Rf0/rb1y2lRmJ
        cmoJaDh7uVhfvchlC0cmhn21OM7S+nvwz5sNp8NstkkDx1LK/JO2Osj5+YFPIEywMBzfZGylOdCYNg/w
        90h6hsCCrFnJ2ptP1qhZpvl0fLCxoQxXWVdTJE29lwzzNg1EfAphE0HamiHtMunMN8F7/hvlYc/moQ9T
        wCN2iJYJZZie/VLwkk8iAiAM83aptJO3+dYmIHXj9a+lp3vcyO2ACPaFBnEgw620hrypQ84XRcNE/APy
        eBLBs1JfxSyFCBMVntkRyFAuOpDvgTJDyB/3kPfzYLUDaCO1ZQz6gsIYkoODQHTJlRhGmP+d/1cSuJIP
        pjMSX0RjW5s5BGEMR1klo+D8OUAlhqLbnF0WiOBLedzMiLSrxbcYdXbxeQU+DJ+MDUWBfKRHkIMnI09p
        2zsWzZllodYVCWOodH8fN8z22Oya9vZP5ALav0qPm3jN/zbbrkYNpyWGWSOdtMvhUU63+cOpcP6ypMFZ
        GmY7bQFqw2WVPxsH54/XG5614cNOedjTjXh+qNiH522o8NCTtkDUQ/Idp2mdYb6MoP+p9NAk33w6Qh/y
        dA2tMyw+MufusPtMfMvIYMMaNbwtGooPOQP1TZcUsVAhSJTQGsM3NotUBFO26uPvUiGSkTIMxkO0xvCe
        z6Jcv9rE8oKkCfdOK178yD8mvCozlNEaw6z7CN/wCYTRtVIIacZIm9pS0xt9K9tGQjD/LadpQxF3d+xL
        Iul80e+J5SIMF+STtFgqV/Em4kCbwPeqcM2rUcMhyMlvTTtyEqnJQlayAwxxnNCxcltWfNlOlLtyFh+s
        AwTgm2bL54O92KjhDET7hDC4v1ovD/pQh9vlx/55PcqV0p0YJfwvxvRyvf7c3rG+g8Pja6OGCMfqphK+
        SKHjv5aT7kQpXxSgfekSzRquceEMP4NI6qsqgZ0gjr2m5EbZ3GYNxxB/8F9zpkSxeKlKgvVcgHTMPUQ5
        hTRriJKouKULovilf4psf8mOndKYgUOU3Niw4YbMpY6kIgzJsVF0uR1wnzdy8Fe+fpWh0j/VsCHtSC3u
        xf4rRLAr2/4XLB0pE9iWZS3Rj5ziybDfn5sZoi05PTwWdhiZimEtn/UI0ws4OBNgZXQAZXCjTyIZdQx7
        6RUShvyX+qXsOgqHfhRDtF3w9mh/sKCDNdh8ePJnOiP7aT5Y3JOJSulLIS2d5xEdNkCXHI635OR/OI9j
        Q1vooBGA/T6mP8XYEjY5RTvgJB1NE/MlSxJxSwxTojiKNBqnIIvy3wq0ydAPnSGjM2wznSGjM2wznSGj
        M2wznSHjms99hkRmhufwcplyyt4AVWaIZuuWvyConAQ+5csgnFJDhH5+GVzJahcRPCtDHTI0hgj9adVN
        6KfBuNDHxdAa0mFy5+N45NXWRwzRaqdcUW8vMfw96KKSOGaI0GJ/BtXxxKsQjxvSLtm2F9WDwXAFThmi
        /lOrHdmV1GOcNERosGxtdYzht6avX2BgiNBGHqTUIuD9yBvlMowM2/mSshNvBcwwNETzXy1ryBm/Md/U
        EKHb4nCl5jB4O2eGuSFCY3YJpQVAcvoNqxlVDOk18zZUR7O35GZUM2xDrirPSHoqGiI0bTZXRfBVmpH0
        VDZsNldpM5IeC8PmctWRjKTHyrCZXHU0I+mxM2wgV5m/Lv4AW8PQuepURtJjbxgyV53OSHpqGKa5KkRR
        NclIemoZklwV4M3dR9+6fZqahuwWQZ8YZiQ9tQ395irjjKSnviHJVc+eqmOFjKTHhSHNVT6KapWMpMeN
        oY/rVdUykh5Xhq5zVdWMpMeZIUI/P5xVx+oZSY9DQ3e5CuM/fI0OcGqI+i5ylVVG0uPWkDTk6uaq0rf4
        18G1Yc1cRTJS8bbSerg3rJOr7DOSHh+GaP4k7javAIYn64ykx4shQsPquSqGZY2MpMeTIWnIxdV2Y82M
        pMebYbVcVTsj6fFoSB/4ZdaQc5CR9Pg0NMxVTjKSHr+GJrkKsIuMpMe3Ib257Jijq4ykx78hWv3VNuSS
        7A0ZHglgSHLVY2l1dJmR9AQxpPdKFouq04ykJ5Ah6l8cVEcM0rMGfBLKkOSqV6k6Os9IesIZklz1zqtj
        BHvXGUlPSMNs4BFWn+vlmbCGaP4DSEby10QrIbAhach9yo/6CEBww+D864YI/Q/YedFfHtqSMQAAAABJ
        RU5ErkJggg==
</value>
  </data>
</root>